# TRIPLEWAVE SERVER CONFIGURATION
# host 
hostname=localhost
# port
port=8114
# path
path=/TripleWave-replay
# the complete address of triplewave server is http://<host>:<port>/<path>

# external address (use in case of proxy)
externaladdress=

# triplewave mode
# transform: transform a web stream in rdf
# replay: streamify a rdf dataset retrieved from a sparql endpoint
# endless: similar to the replay. The data are actualizaed, triplewave replace the original timestamps with the actual extraction time
mode=replay

# REPLAY/ENDLESS MODE CONFIGURATION (mode = replay | endless)

# configuration of the fuseki endpoint (it is reccomended to leave the dafault value)
rdf_query_endpoint=http://localhost:3030/ds/query
rdf_update_endpoint=http://localhost:3030/ds/update
# path to the file that contains the static data to be streamed
rdf_file=../rdf/data.ttl
# define the format of the input file
# the supported format are triples, quads, rdfstream
# triples: the original data are in the format <subject, predicate, object>
# quads: the original data are in the format <subject, predicate, object, timestamp>
# rdfstream: the original data are already a RDF stream
sources=triples

# location of the RDF file representing the T-BOX of the data representation, needed in the sGraph construction
tbox_stream_location=http://purl.oclc.org/NET/ssnx/ssn

# TRANSFORMATION MODE CONFIGURATION (mode = transform)

# name of the js file that needs to be loaded to retrieve the web stream, it represents the implementation of a web connector
stream_name=wikiStream.js 
# file of the r2rml transformation
stream_mapping=wiki.r2rml

# TRIPLEWAVE OUTPUT WEBSOCKET CONFIGURATION
#ws hostname
ws_hostname=localhost
# port
ws_port=8124
# path
ws_stream_location=/TripleWave-replay/stream
# needed if the server are behind an apache (should match you apache / ngix configuration)
ws_address=